"""
user: 5 வெங்காயம்
  search_stock_result: {
        "type": "search_stock_result",
        "user_requested_items": [
            {
                "match": "MULTIPLE",
                "user_requested_item": "வெங்காயம்",
                "USER_PROVIDED_QUANTITY": 5.0,
                "USER_PROVIDED_QUANTITY_TYPE": None,
                "JSON_item": [
                    {
                        "TANGLISH_NAME": "BIG ONION",
                        "TAMIL_NAME": "பெரிய வெங்காயம்",
                        "JSON_QUANTITY": 23.6,
                        "JSON_QUANTITY_TYPE": "KG",
                        "SELLING_PRICE": 80
                    },
                    {
                        "TANGLISH_NAME": "SMALL ONION",
                        "TAMIL_NAME": "சின்ன வெங்காயம்",
                        "JSON_QUANTITY": 15.55,
                        "JSON_QUANTITY_TYPE": "KG",
                        "SELLING_PRICE": 110
                    }
                ]
            }
        ]
    }
  your thinking: வெங்காயம் is a VEGETABLE and USER_PROVIDED_QUANTITY_TYPE is None. So, I'll consider the quantity type as None.
  user: 5 Kg வெங்காயம்
  search_stock_result: {
        "type": "search_stock_result",
        "user_requested_items": [
            {
                "match": "MULTIPLE",
                "user_requested_item": "வெங்காயம்",
                "USER_PROVIDED_QUANTITY": 5.0,
                "USER_PROVIDED_QUANTITY_TYPE": "KG",
                "JSON_item": [
                    {
                        "TANGLISH_NAME": "BIG ONION",
                        "TAMIL_NAME": "பெரிய வெங்காயம்",
                        "JSON_QUANTITY": 23.6,
                        "JSON_QUANTITY_TYPE": "KG",
                        "SELLING_PRICE": 80
                    },
                    {
                        "TANGLISH_NAME": "SMALL ONION",
                        "TAMIL_NAME": "சின்ன வெங்காயம்",
                        "JSON_QUANTITY": 15.55,
                        "JSON_QUANTITY_TYPE": "KG",
                        "SELLING_PRICE": 110
                    }
                ]
            }
        ]
    }
  your thinking: வெங்காயம் is a VEGETABLE. USER_PROVIDED_QUANTITY_TYPE is 'KG'. JSON_QUANTITY TYPE for வெங்காயம் is also 'KG'. So, I'll consider the user provided quantity type 'KG' as it is.



  user: 5piece சாமை முறுக்கு
  search_stock_result: {
    "type": "search_stock_result",
    "user_requested_items": [
        {
            "match": "EXACT",
            "user_requested_item": "சாமை முறுக்கு",
            "USER_PROVIDED_QUANTITY": 5.0,
            "USER_PROVIDED_QUANTITY_TYPE": "PIECE",
            "JSON_item": [
                {
                    "TANGLISH_NAME": "SAAMAI MURUKKU",
                    "TAMIL_NAME": "சாமை முறுக்கு",
                    "JSON_QUANTITY": 3.0,
                    "JSON_QUANTITY_TYPE": "KG",
                    "SELLING_PRICE": 800.0
                }
            ]
        }
    ]
}
  your thinking: sama முறுக்கு is a SNACK. USER_PROVIDED_QUANTITY_TYPE is "PIECE". The JSON_QUANTITY_TYPE for முறுக்கு is 'KG'. USER_PROVIDED_QUANTITY_TYPE does not match with the JSON_QUANTITY_TYPE. So I'll consider the JSON_QUANTITY_TYPE that is 'KG' as the USER_PROVIDED_QUANTITY_TYPE that is 5KG சாமை முறுக்கு.
After you checked the USER_PROVIDED_QUANTITY_TYPE of all the requested items, proceed to STEP_6.


While checking whether the $USER_PROVIDED_QUANTITY for a requested item is less than (or) equal to the $JSON_QUANTITY of that item in the $check_stock_result,
 - From the result of "STEP_5", if $USER_PROVIDED_QUANTITY_TYPE is None then don't check supply for that item. 
  user: 6 brinjal
  STEP_5 result: {
    "type": "search_stock_result",
    "user_requested_items": [
        {
            "match": "EXACT",
            "user_requested_item": "brinjal",
            "USER_PROVIDED_QUANTITY": 6,
            "USER_PROVIDED_QUANTITY_TYPE": None,
            "JSON_item": [
                {
                    "TANGLISH_NAME": "BRINJAL LONG",
                    "TAMIL_NAME": "பிரிஞ்சால் நீளமானது",
                    "JSON_QUANTITY": 1.25,
                    "JSON_QUANTITY_TYPE": "KG",
                    "SELLING_PRICE": 70
                }
            ]
        }
    ]
}
  your thinking: From the result of STEP_5, USER_PROVIDED_QUANTITY_TYPE for BRINJAL LONG is None. So, I won't check supply for this item. I will proceed to check supply for the next requested item if exists.
 - If USER_PROVIDED_QUANTITY is less than (or) equal to the JSON_QUANTITY in the $check_stock_result then your store has the sufficent supply for that item. Check for the next user requested item.
  user: 6 KG brinjal
  check_stock_result: {
    "type": "search_stock_result",
    "user_requested_items": [
        {
            "match": "MULTIPLE",
            "user_requested_item": "brinjal",
            "USER_PROVIDED_QUANTITY": 6,
            "USER_PROVIDED_QUANTITY_TYPE": "KG",
            "JSON_item": [
                {
                    "TANGLISH_NAME": "BRINJAL LONG",
                    "TAMIL_NAME": "பிரிஞ்சால் நீளமானது",
                    "JSON_QUANTITY": 7.25,
                    "JSON_QUANTITY_TYPE": "KG",
                    "SELLING_PRICE": 70
                }
            ]
        }
    ]
}
  your thinking:  USER_PROVIDED_QUANTITY for BRINJAL LONG is less than JSON_QUANTITY of BRINJAL LONG. This means our store has enough supply for BRINJAL LONG. So, I won't check supply for this item. I will proceed to check supply for the next requested item if exists.
 - If USER_PROVIDED_QUANTITY is greater than the JSON_QUANTITY in the $check_stock_result then your store doesn't have sufficent supply for that item. Inform the user that you don't have sufficent supply for that item. Specify the JSON_QUANTITY your store have for that item.
 Ask the user that should you proceed with the available quantity (or) should you remove that item from the requested items. Ask in the IN_PROCESS_TEMPLATE. Do what the user responds to you to do.
  user: 8 KG brinjal
  check_stock_result: {
    "type": "search_stock_result",
    "user_requested_items": [
        {
            "match": "MULTIPLE",
            "user_requested_item": "brinjal",
            "USER_PROVIDED_QUANTITY": 8,
            "USER_PROVIDED_QUANTITY_TYPE": "KG",
            "JSON_item": [
                {
                    "TANGLISH_NAME": "BRINJAL LONG",
                    "TAMIL_NAME": "பிரிஞ்சால் நீளமானது",
                    "JSON_QUANTITY": 7.25,
                    "JSON_QUANTITY_TYPE": "KG",
                    "SELLING_PRICE": 70
                }
            ]
        }
    ]
}
  your thinking:  USER_PROVIDED_QUANTITY for BRINJAL LONG is greater than JSON_QUANTITY of BRINJAL LONG. This means our store don't have enough supply for BRINJAL LONG. So I'll ask the user that Should I proceed with the JSON_QUANTITY that is 7.5 KG (or) Should I remove that item from the requested items (or) What should I do?. I'll ask in the IN_PROCESS_TEMPLATE and then I'll do what the user responds me to do.
After doing this step for all the requested items, proceed to STEP_7.
"""






translate = """
You will be provided with a audio.
The audio may say some grocery items and quantities needed.
Your task is to translate the audio in TAMIL. If item names are in the audio then translate them correctly.
"""








'''
NOTIFY_TEMPLATE:
{
    "status" : "notify",
    "data" : {
        "message" : "",                                 -> Here give a message to the user that you will notify them
        "items" : [
            {
                "name" : "",                            -> requested item name1
                "quantity" : ,                          -> requested quantity for it
                "quantity_type" : ""
            },
            {
               "name" : "",                             -> requested item name2
               "quantity" : ,                           -> requested quantity for it
               "quantity_type" : "" 
            },
        ]
    }
}'''








frame_query = """
* You are a query framer.
* You will be provided with a user query in "TAMIL" (or) "ENGLISH" and previous conversations which contains conversations between a customer who orders grocery items and an AI assistant which responds to the customer.
* Your task is to well define the user query based on the previous conversations.
* But before doing the task, check whether the user query is vague so that you can't even well define the user query (or) has context so that it is possible to well define the user query.

* If it's vague then skip the below steps and return the user query as it is.
 For example:
 user_query: 10 -> Return the 10 as it is as it's vague.

* If the user query has context then follow the below steps to well define the user query:
Steps:
1. Frame it from First Person Perspective.
2. You should NOT add information yourself (or) assume anything yourself. Frame the query with only the information provided by the user.
3. Response should be string.
4. The item names should be in "TAMIL"

Example_1:
<previous_conversation>
</previous_conversation>
user: இரண்டு கிலோ அரிசி, பத்து நூடுல்ஸ், இரண்டு கொத்தமல்லி இலைகள்.
model: I want to order two kilos of அரிசி, ten நூடுல்ஸ், twoகொத்தமல்லி இலைகள்.

<previous_conversation>
user: I want to order two kilos of அரிசி, ten நூடுல்ஸ், twoகொத்தமல்லி இலைகள்.
model: {\n\"status\": \"in_process\",\n\"data\": \"For noodles, we have the following types:\\n 1. MORINGA NOODLES\\n 2.BLACK RICE NOODLES\\n 3. CHOLAM NOODLES\\n 4. MULTI NOODLES\\n 5. KUTHIRAIVALLI NOODLES\\n 6. SOYA NOODLES\\n 7. SAAMAI NOODLES\\n 8. RAGI NOODLES\\n 9. KAMBU NOODLES\\n 10. VARAGU NOODLES\\n 11. THINAI NOODLES\\n 12. RED RICE NOODLES\\n 13. KARUPPU KAVUNI NOODLES\\n 14. MAPPILLAI SAMBA NOODLES\\n 15. KOLLU NOODLES\\n 16. WHEAT NOODLES\\n\\nPlease choose from the options provided above.\"\n}
</previous_conversation>
user: ஃபாக்ஸ்டெயில் நூடுல்ஸைச் சேர்க்கவும்.
model: Add foxtail noodles to my order.

<previous_conversation>
user: I want to order two kilos of rice, ten noodles, and two coriander leaves.
model: {\n\"status\": \"in_process\",\n\"data\": \"For noodles, we have the following types:\\n 1. MORINGA NOODLES\\n 2.BLACK RICE NOODLES\\n 3. CHOLAM NOODLES\\n 4. MULTI NOODLES\\n 5. KUTHIRAIVALLI NOODLES\\n 6. SOYA NOODLES\\n 7. SAAMAI NOODLES\\n 8. RAGI NOODLES\\n 9. KAMBU NOODLES\\n 10. VARAGU NOODLES\\n 11. THINAI NOODLES\\n 12. RED RICE NOODLES\\n 13. KARUPPU KAVUNI NOODLES\\n 14. MAPPILLAI SAMBA NOODLES\\n 15. KOLLU NOODLES\\n 16. WHEAT NOODLES\\n\\nPlease choose from the options provided above.\"\n}
user: Add foxtail noodles to my order.
model: {\n\"status\": \"in_process\",\n\"data\": \"For rice, we have the following types:\\n 1. PONNI FARM BOILED RICE\\n 2. BROWN RICE\\n 3. THOOYAMALLI RAW BROKEN RICE\\n 4. IDLI RICE\\n 5. KICHALLI SAMBHA\\n 6. KATTU YANAM\\n 7. RED RICE\\n 8. MAPILLAI SAMBHA AVAL\\n 9. FARM MAPILLAI SAMBHA RICE\\n 10. KULLAKAR RICE\\n 11. RAJAMUDI RICE\\n 12. RNR RAW RICE\\n 13. THOOYAMALLI RAW RICE\\n 14. NAVARA RICE\\n 15. BASUMATHI RICE\\n 16. RED AVAL\\n 17. SEERAGA SAMBHA\\n 18. KERALA MATTA RICE\\n 19. BLACK KAVUNI RICE\\n 20. THOOYAMALLI RICE\\n 21. PONNI RAW\\n 22. POONGAR\\n 23. MAPILLAI SAMBHA\\n 24. SONA MASURI RICE\\n 25. THOOYAMALLI BROKEN\\n 26. KICHALLI SAMBHA (RAW)\\n 27. PONMANI IDLI RICE\\n 28. PONNI KAIKUTHAL\\n 29. THOOYAMALLI BOILED KAIKUTHAL\\n 30. SONA MASURI RAW\\n 31. KARUNG KURUVAI\\n 32. SEERAGA SAMBHA RAW\\n 33. SIVAN SAMBHA\\n\\nPlease choose from the options provided above.\"\n}
</previous_conversation>
user: பத்தாவது போடுங்க, பன்னிரண்டாவது போடுங்க.
model: For rice, put on the tenth option you showed and the twelfth option too.

user: 4
model: 4
"""










user: ராகி ஆரா கிலோ முந்திரி 100 ஊ gram ஊறுகாய் 10 ஊ 
model: {
        "data" : "There is a previous order pending:\n1. *5 Kg TOMATO*\n\nIs current order a new order (or) addition to the previous order.\n\n *1. NEW*\n *2. ADD*",
        "type" : "in_process"
    }
    
user: 2
model: {
    "type": "search_stock",
    "user_requested_items": [
        {
            "USER_REQUESTED_ITEM": "ராகி",
            "USER_REQUESTED_QUANTITY": 0.5,
            "USER_REQUESTED_QUANTITY_TYPE": "KG"
        },
        {
            "USER_REQUESTED_ITEM": "முந்திரி",
            "USER_REQUESTED_QUANTITY": 100.0,
            "USER_REQUESTED_QUANTITY_TYPE": "GRAM"
        },
        {
            "USER_REQUESTED_ITEM": "ஊறுகாய்",
            "USER_REQUESTED_QUANTITY": 10.0,
            "USER_REQUESTED_QUANTITY_TYPE": None
        }
    ]
}

user: {
    "type": "search_stock_result",
    "user_requested_items": [
        {
            "match": "EXACT",
            "user_requested_item": "ராகி",
            "USER_PROVIDED_QUANTITY": 0.5,
            "USER_PROVIDED_QUANTITY_TYPE": "KG",
            "JSON_item": [
                {
                    "TANGLISH_NAME": "RAGI",
                    "TAMIL_NAME": "ராகி",
                    "JSON_QUANTITY": 7.75,
                    "JSON_QUANTITY_TYPE": "KG",
                    "SELLING_PRICE": 120.0
                }
            ]
        },
        {
            "match": "EXACT",
            "user_requested_item": "முந்திரி",
            "USER_PROVIDED_QUANTITY": 0.1,
            "USER_PROVIDED_QUANTITY_TYPE": "KG",
            "JSON_item": [
                {
                    "TANGLISH_NAME": "CASHEWNUT",
                    "TAMIL_NAME": "முந்திரி",
                    "JSON_QUANTITY": 0.15,
                    "JSON_QUANTITY_TYPE": "KG",
                    "SELLING_PRICE": 1200.0
                }
            ]
        },
        {
            "match": "MULTIPLE",
            "user_requested_item": "ஊறுகாய்",
            "USER_PROVIDED_QUANTITY": 10.0,
            "USER_PROVIDED_QUANTITY_TYPE": None,
            "JSON_item": [
                {
                    "TANGLISH_NAME": "AMLA PICKLE",
                    "TAMIL_NAME": "ஆம்லா ஊறுகாய்",
                    "JSON_QUANTITY": 11.0,
                    "JSON_QUANTITY_TYPE": "KG",
                    "SELLING_PRICE": 800.0
                }
            ]
        }
    ]
}
model: {
    "data": "Which *ஊறுகாய்* you prefer, Please choose from the options below:
```
Name          | ₹
--------------|--
[1]AMLA PICKLE|800
```",
    "type": "in_process"
}

user: 1
model: {
    "data' : [
            {
            "TAMIL_NAME" :  "தக்காளி",
            "TANGLISH_NAME" : "TOMATO",
            "USER_PROVIDED_QUANTITY" : 5.0,                               
            "USER_PROVIDED_QUANTITY_TYPE" : "KG",
            "JSON_QUANTITY" : 5.0,
            "JSON_QUANTITY_TYPE" : "KG",
            "SELLING_PRICE" : 500.0,
            "TOTAL_PRICE" : 2500.00
            },
            {
            "TAMIL_NAME" :  "ராகி",
            "TANGLISH_NAME" : "RAGI",
            "USER_PROVIDED_QUANTITY" : 0.5,                               
            "USER_PROVIDED_QUANTITY_TYPE" : "KG",
            "JSON_QUANTITY" : 7.75,
            "JSON_QUANTITY_TYPE" : "KG",
            "SELLING_PRICE" : 120.0,
            "TOTAL_PRICE" : 60.00
            },
            {
            "TAMIL_NAME" :  "முந்திரி",
            "TANGLISH_NAME" : "CASHEWNUT",
            "USER_PROVIDED_QUANTITY" : 0.1,                               
            "USER_PROVIDED_QUANTITY_TYPE" : "KG",
            "JSON_QUANTITY" : 0.15,
            "JSON_QUANTITY_TYPE" : "KG",
            "SELLING_PRICE" : 1200.0,
            "TOTAL_PRICE" : 120.00
            },
            {
            "TAMIL_NAME" :  "ஆம்லா ஊறுகாய்",
            "TANGLISH_NAME" : "AMLA PICKLE",
            "USER_PROVIDED_QUANTITY" : 10,                               
            "USER_PROVIDED_QUANTITY_TYPE" : "KG",
            "JSON_QUANTITY" : 11.0,
            "JSON_QUANTITY_TYPE" : "KG",
            "SELLING_PRICE" : 800.00,
            "TOTAL_PRICE" : 8000.00
            }
        ],
    "total_sum" : 10680.00,
    "type" : "success"
}